import streamlit as st
import requests
import pandas as pd

API_KEY = "CVROqS2TTsTM06ZNpYQJd5C1dXg1Amuv"  # ุงุณุชุจุฏู ูุฐุง ุจููุชุงุญ API ุงูุฎุงุต ุจู
BASE_URL = "https://financialmodelingprep.com/api/v3"

def get_stock_screener(params):
    url = f"{BASE_URL}/stock-screener?apikey={API_KEY}"
    for key, value in params.items():
        if value is not None:
            url += f"&{key}={value}"
    response = requests.get(url)
    return response.json()

st.title('๐ค ูุตูุงุฉ ุงูุฃุณูู ุงูุฐููุฉ (ุงูุนุงุฆุฏ + ุงูููู)')
st.markdown("""
ูุฐุง ุงูุชุทุจูู ูุณุงุนุฏู ูู ุงูุนุซูุฑ ุนูู ุงูุฃุณูู ุงูุชู ุชุฌูุน ุจูู **ุงูุนุงุฆุฏ ุงูุฌูุฏ** ู**ุงูููู ุงููุณุชุฏุงู**.
""")

with st.sidebar:
    st.header("โ๏ธ ูุนุงููุฑ ุงูุชุตููุฉ")
    
    st.subheader("ูุนุงููุฑ ุงูุนุงุฆุฏ (Dividend)")
    dividend_yield = st.slider("ุงูุนุงุฆุฏ ุนูู ุงูุชูุฒูุนุงุช (%)", min_value=0.0, max_value=20.0, value=3.0, step=0.5)
    dividend_growth = st.slider("ููู ุงูุชูุฒูุนุงุช ุนูู ุงูุฃูู (ุณููุงุช)", min_value=0, max_value=20, value=5)
    
    st.subheader("ูุนุงููุฑ ุงูููู")
    revenue_growth = st.slider("ููู ุงูุฅูุฑุงุฏุงุช ุงูุณููู (%)", min_value=0, max_value=100, value=10)
    eps_growth = st.slider("ููู ุฑุจุญูุฉ ุงูุณูู (EPS) (%)", min_value=-50, max_value=100, value=0)
    
    st.subheader("ูุนุงููุฑ ุฅุถุงููุฉ")
    market_cap = st.selectbox("ุญุฌู ุงูุดุฑูุฉ", options=["ุงููุจูุฑุฉ ููุท", "ุงููุชูุณุทุฉ", "ุงูุตุบูุฑุฉ", "ุงููู"], index=0)
    exchange = st.multiselect("ุงูุจูุฑุตุฉ", options=["NASDAQ", "NYSE", "AMEX"], default=["NASDAQ", "NYSE"])

params = {
    "dividendYieldMoreThan": dividend_yield,
    "dividendYearsMoreThan": dividend_growth,
    "revenueGrowthMoreThan": revenue_growth,
    "epsGrowthMoreThan": eps_growth,
    "marketCapMoreThan": "1000000000" if market_cap == "ุงููุจูุฑุฉ ููุท" else None,
    "exchange": ",".join(exchange) if exchange else None
}

if st.button("๐ ุจุญุซ ุนู ุงูุฃุณูู"):
    with st.spinner("ุฌุงุฑู ุงูุจุญุซ ุนู ุฃูุถู ุงูุฃุณูู..."):
        try:
            data = get_stock_screener(params)
            
            if not data:
                st.warning("ูู ูุชู ุงูุนุซูุฑ ุนูู ุฃุณูู ุชุทุงุจู ูุนุงููุฑู. ุญุงูู ุชุฎููู ุงููุนุงููุฑ.")
            else:
                df = pd.DataFrame(data)
                
                # ุชุญุฏูุฏ ุงูุฃุนูุฏุฉ ุงููุชุงุญุฉ ูุนููุงู ูู ุงูุจูุงูุงุช
                available_columns = df.columns.tolist()
                
                # ูุงุฆูุฉ ุจุงูุฃุนูุฏุฉ ุงููุทููุจุฉ ูุน ุงูุจุฏุงุฆู ูู ุญุงูุฉ ุนุฏู ูุฌูุฏูุง
                columns_mapping = {
                    'symbol': 'ุงูุฑูุฒ',
                    'companyName': 'ุงุณู ุงูุดุฑูุฉ',
                    'dividendYield': 'ุงูุนุงุฆุฏ (%)',
                    'payoutRatio': 'ูุณุจุฉ ุงูุชูุฒูุน',
                    'revenueGrowth': 'ููู ุงูุฅูุฑุงุฏุงุช',
                    'epsGrowth': 'ููู ุฑุจุญูุฉ ุงูุณูู',
                    'price': 'ุงูุณุนุฑ',
                    'marketCap': 'ุงููููุฉ ุงูุณูููุฉ'
                }
                
                # ุฅูุดุงุก ูุงุฆูุฉ ุจุงูุฃุนูุฏุฉ ุงูุชู ุณูุชู ุนุฑุถูุง (ุงูููุฌูุฏุฉ ููุท ูู ุงูุจูุงูุงุช)
                columns_to_show = []
                display_columns = []
                
                for col, display_name in columns_mapping.items():
                    if col in available_columns:
                        columns_to_show.append(col)
                        display_columns.append(display_name)
                
                # ุชุญููู ุงูุฃุฑูุงู ุงููุจูุฑุฉ ุฅูู ุตูุบุฉ ููุฑูุกุฉ
                if 'marketCap' in df.columns:
                    df['marketCap'] = df['marketCap'].apply(lambda x: f"${x/1000000000:.2f}B" if x >= 1000000000 else f"${x/1000000:.2f}M")
                
                # ุชูุณูู ุงูุฃุนูุฏุฉ ุงูุฑูููุฉ
                format_dict = {}
                if 'dividendYield' in df.columns:
                    format_dict['ุงูุนุงุฆุฏ (%)'] = '{:.2f}%'
                if 'payoutRatio' in df.columns:
                    format_dict['ูุณุจุฉ ุงูุชูุฒูุน'] = '{:.2f}%'
                if 'revenueGrowth' in df.columns:
                    format_dict['ููู ุงูุฅูุฑุงุฏุงุช'] = '{:.2f}%'
                if 'epsGrowth' in df.columns:
                    format_dict['ููู ุฑุจุญูุฉ ุงูุณูู'] = '{:.2f}%'
                if 'price' in df.columns:
                    format_dict['ุงูุณุนุฑ'] = '${:.2f}'
                
                # ุนุฑุถ ุงููุชุงุฆุฌ
                st.success(f"ุชู ุงูุนุซูุฑ ุนูู {len(df)} ุณูููุง ุชุทุงุจู ูุนุงููุฑู")
                
                # ุนุฑุถ ุงูุฌุฏูู ูุน ุงูุฃุนูุฏุฉ ุงููุชุงุญุฉ ููุท
                if len(columns_to_show) > 0:
                    styled_df = df[columns_to_show].rename(columns=dict(zip(columns_to_show, display_columns)))
                    
                    # ุชุทุจูู ุงูุชูุณูู ุนูู ุงูุฃุนูุฏุฉ ุงููุชุงุญุฉ ููุท
                    if format_dict:
                        styled_df = styled_df.style.format(format_dict)
                    
                    st.dataframe(styled_df, height=600)
                    
                    # ุฎูุงุฑ ุงูุชูุฒูู
                    csv = df[columns_to_show].to_csv(index=False).encode('utf-8')
                    st.download_button(
                        label="๐ฅ ุชูุฒูู ุงููุชุงุฆุฌ ูููู CSV",
                        data=csv,
                        file_name='filtered_stocks.csv',
                        mime='text/csv'
                    )
                else:
                    st.warning("ุงูุจูุงูุงุช ุงููุณุชุฑุฌุนุฉ ูุง ุชุญุชูู ุนูู ุงูุฃุนูุฏุฉ ุงููุทููุจุฉ")
                
        except Exception as e:
            st.error(f"ุญุฏุซ ุฎุทุฃ: {str(e)}")

st.markdown("""
### ูุตุงุฆุญ ููุงุณุชุฎุฏุงู:
1. ุจุนุถ ุงูุฃุณูู ูุฏ ูุง ุชุญุชูู ุนูู ุฌููุน ุจูุงูุงุช ุงูุนุงุฆุฏ ุฃู ุงูููู
2. ุฅุฐุง ูู ุชุธูุฑ ุจุนุถ ุงูุฃุนูุฏุฉุ ููุฐุง ูุนูู ุฃู API ูู ูุฑุฌุน ูุฐู ุงูุจูุงูุงุช
3. ุฌุฑุจ ุชุนุฏูู ูุนุงููุฑ ุงูุจุญุซ ููุญุตูู ุนูู ูุชุงุฆุฌ ุฃูุถู
""")

st.markdown("---")
st.markdown("""
**ูุตุฏุฑ ุงูุจูุงูุงุช:** [Financial Modeling Prep](https://financialmodelingprep.com/)
""")
