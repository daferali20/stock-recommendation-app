import streamlit as st
import requests
import pandas as pd

# ุนููุงู API - ุณุชุญุชุงุฌ ุฅูู ุงูุญุตูู ุนูู ููุชุงุญ API ูุฌุงูู ูู ูููุน Financial Modeling Prep
API_KEY = "CVROqS2TTsTM06ZNpYQJd5C1dXg1Amuv"  # ุงุณุชุจุฏู ูุฐุง ุจููุชุงุญ API ุงูุฎุงุต ุจู
BASE_URL = "https://financialmodelingprep.com/api/v3"

# ูุธููุฉ ูุฌูุจ ุจูุงูุงุช ุงูุฃุณูู
def get_stock_screener(params):
    url = f"{BASE_URL}/stock-screener?apikey={API_KEY}"
    for key, value in params.items():
        if value is not None:
            url += f"&{key}={value}"
    response = requests.get(url)
    return response.json()

# ูุงุฌูุฉ ุงููุณุชุฎุฏู
st.title('๐ค ูุตูุงุฉ ุงูุฃุณูู ุงูุฐููุฉ (ุงูุนุงุฆุฏ + ุงูููู)')
st.markdown("""
ูุฐุง ุงูุชุทุจูู ูุณุงุนุฏู ูู ุงูุนุซูุฑ ุนูู ุงูุฃุณูู ุงูุชู ุชุฌูุน ุจูู **ุงูุนุงุฆุฏ ุงูุฌูุฏ** ู**ุงูููู ุงููุณุชุฏุงู**.
""")

# ุดุฑูุท ุฌุงูุจู ููุฅุนุฏุงุฏุงุช
with st.sidebar:
    st.header("โ๏ธ ูุนุงููุฑ ุงูุชุตููุฉ")
    
    # ูุนุงููุฑ ุงูุนุงุฆุฏ
    st.subheader("ูุนุงููุฑ ุงูุนุงุฆุฏ (Dividend)")
    dividend_yield = st.slider("ุงูุนุงุฆุฏ ุนูู ุงูุชูุฒูุนุงุช (%)", min_value=0.0, max_value=20.0, value=3.0, step=0.5)
    dividend_growth = st.slider("ููู ุงูุชูุฒูุนุงุช ุนูู ุงูุฃูู (ุณููุงุช)", min_value=0, max_value=20, value=5)
    
    # ูุนุงููุฑ ุงูููู
    st.subheader("ูุนุงููุฑ ุงูููู")
    revenue_growth = st.slider("ููู ุงูุฅูุฑุงุฏุงุช ุงูุณููู (%)", min_value=0, max_value=100, value=10)
    eps_growth = st.slider("ููู ุฑุจุญูุฉ ุงูุณูู (EPS) (%)", min_value=-50, max_value=100, value=0)
    
    # ูุนุงููุฑ ุฅุถุงููุฉ
    st.subheader("ูุนุงููุฑ ุฅุถุงููุฉ")
    market_cap = st.selectbox("ุญุฌู ุงูุดุฑูุฉ", options=["ุงููุจูุฑุฉ ููุท", "ุงููุชูุณุทุฉ", "ุงูุตุบูุฑุฉ", "ุงููู"], index=0)
    exchange = st.multiselect("ุงูุจูุฑุตุฉ", options=["NASDAQ", "NYSE", "AMEX"], default=["NASDAQ", "NYSE"])

# ุชุญููู ุงููุนุงููุฑ ุฅูู ุตูุบุฉ API
market_cap_map = {
    "ุงููุจูุฑุฉ ููุท": "LargeCap",
    "ุงููุชูุณุทุฉ": "MidCap",
    "ุงูุตุบูุฑุฉ": "SmallCap",
    "ุงููู": None
}

params = {
    "dividendYieldMoreThan": dividend_yield,
    "dividendYearsMoreThan": dividend_growth,
    "revenueGrowthMoreThan": revenue_growth,
    "epsGrowthMoreThan": eps_growth,
    "marketCapMoreThan": "1000000000" if market_cap == "ุงููุจูุฑุฉ ููุท" else None,
    "exchange": ",".join(exchange) if exchange else None
}

# ุฒุฑ ุงูุจุญุซ
if st.button("๐ ุจุญุซ ุนู ุงูุฃุณูู"):
    with st.spinner("ุฌุงุฑู ุงูุจุญุซ ุนู ุฃูุถู ุงูุฃุณูู..."):
        try:
            data = get_stock_screener(params)
            
            if not data:
                st.warning("ูู ูุชู ุงูุนุซูุฑ ุนูู ุฃุณูู ุชุทุงุจู ูุนุงููุฑู. ุญุงูู ุชุฎููู ุงููุนุงููุฑ.")
            else:
                df = pd.DataFrame(data)
                
                # ุชุญุฏูุฏ ุงูุฃุนูุฏุฉ ุงููููุฉ
                columns_to_show = [
                    'symbol', 'companyName', 'dividendYield', 'payoutRatio', 
                    'revenueGrowth', 'epsGrowth', 'price', 'marketCap'
                ]
                
                # ุชุญููู ุงูุฃุฑูุงู ุงููุจูุฑุฉ ุฅูู ุตูุบุฉ ููุฑูุกุฉ
                df['marketCap'] = df['marketCap'].apply(lambda x: f"${x/1000000000:.2f}B" if x >= 1000000000 else f"${x/1000000:.2f}M")
                
                # ุนุฑุถ ุงููุชุงุฆุฌ
                st.success(f"ุชู ุงูุนุซูุฑ ุนูู {len(df)} ุณูููุง ุชุทุงุจู ูุนุงููุฑู")
                st.dataframe(df[columns_to_show].rename(columns={
                    'symbol': 'ุงูุฑูุฒ',
                    'companyName': 'ุงุณู ุงูุดุฑูุฉ',
                    'dividendYield': 'ุงูุนุงุฆุฏ (%)',
                    'payoutRatio': 'ูุณุจุฉ ุงูุชูุฒูุน',
                    'revenueGrowth': 'ููู ุงูุฅูุฑุงุฏุงุช',
                    'epsGrowth': 'ููู ุฑุจุญูุฉ ุงูุณูู',
                    'price': 'ุงูุณุนุฑ',
                    'marketCap': 'ุงููููุฉ ุงูุณูููุฉ'
                }).style.format({
                    'ุงูุนุงุฆุฏ (%)': '{:.2f}%',
                    'ูุณุจุฉ ุงูุชูุฒูุน': '{:.2f}%',
                    'ููู ุงูุฅูุฑุงุฏุงุช': '{:.2f}%',
                    'ููู ุฑุจุญูุฉ ุงูุณูู': '{:.2f}%',
                    'ุงูุณุนุฑ': '${:.2f}'
                }), height=600)
                
                # ุฎูุงุฑ ุงูุชูุฒูู
                csv = df[columns_to_show].to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="๐ฅ ุชูุฒูู ุงููุชุงุฆุฌ ูููู CSV",
                    data=csv,
                    file_name='filtered_stocks.csv',
                    mime='text/csv'
                )
                
        except Exception as e:
            st.error(f"ุญุฏุซ ุฎุทุฃ: {str(e)}")

# ูุนูููุงุช ุฅุถุงููุฉ
st.markdown("""
### ูุตุงุฆุญ ููุงุณุชุฎุฏุงู:
1. ููุญุตูู ุนูู ุฃุณูู ุฐุงุช ุนุงุฆุฏ ุฌูุฏุ ุงุถุจุท "ุงูุนุงุฆุฏ ุนูู ุงูุชูุฒูุนุงุช" ุนูู 3% ุฃู ุฃูุซุฑ.
2. ูุฃุณูู ุงููููุ ุฑูุฒ ุนูู "ููู ุงูุฅูุฑุงุฏุงุช" ู"ููู ุฑุจุญูุฉ ุงูุณูู".
3. ุงูุฃุณูู ุงูุชู ุชุฌูุน ุจูู ุงูุงุซููู (ูุซู Microsoft) ูุงุฏุฑุฉ ูููููุง ุฐุงุช ุฌูุฏุฉ ุนุงููุฉ.
""")

# ุชุฐููู ุงูุตูุญุฉ
st.markdown("---")
st.markdown("""
**ูุตุฏุฑ ุงูุจูุงูุงุช:** [Financial Modeling Prep](https://financialmodelingprep.com/)
""")
